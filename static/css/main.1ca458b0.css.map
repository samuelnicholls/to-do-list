{"version":3,"file":"static/css/main.1ca458b0.css","mappings":"0EAQA,iBAGE,mCACA,kCAGA,mBAGF,KAEE,8BADA,gBACA,CAGF,KACE,SAGF,KACE,cAGF,GACE,cACA,eAGF,GACE,mBACA,SACA,iBAGF,IACE,kCACA,cAGF,EACE,6BAGF,MAEE,YADA,YACA,CAGF,YACE,mBACA,0BACA,0EAGF,SAEE,mBAGF,cAGE,kCACA,cAGF,MACE,cAGF,QAEE,cACA,cACA,kBACA,uBAGF,IACE,cAGF,IACE,UAGF,IACE,kBAGF,sCAKE,oBACA,eACA,iBACA,SAGF,aAEE,iBAGF,cAEE,oBAGF,gDAIE,0BAGF,wHAIE,kBACA,UAGF,4GAIE,8BAGF,SACE,2BAGF,OACE,sBACA,cACA,cACA,eACA,UACA,mBAGF,SACE,uBAGF,SACE,cAGF,6BAEE,sBACA,UAGF,kFAEE,YAGF,cACE,6BACA,oBAGF,yCACE,wBAGF,6BACE,0BACA,aAGF,QACE,cAGF,QACE,kBAOF,kBACE,aAGF,OACE,SC1MF,QACE,aAGA,cAFA,gBACA,cACA,CCJF,WAGE,sBAFA,aACA,iBCJM,CCyGF,yBFvGN,WAMI,cAGF,iBAIE,WAFA,8BGbW,CHcX,eAFA,QCXI,CCwGF,yBF9FJ,iBAOI,gBIhBN,SAIE,sBADA,8BDLa,CCIb,aADA,UAGA,CCJF,2BAEE,mBADA,YACA,CAIE,mCACE,qBJTE,CIWF,0CACE,cAIJ,iCACE,aJfC,CIgBD,6BAIJ,gBAKE,qBJ1BI,CI2BJ,sBACA,eAJA,YACA,kBAHA,kBACA,UAKA,CAEA,uBAQE,6BADA,4BAGA,WATA,aAKA,YAJA,kBAEA,UADA,QAMA,wDAJA,SAKA,CAIJ,eAME,6BACA,YACA,eALA,YAEA,iBADA,UAHA,kBACA,UAMA,CAEA,2CAOE,qBJ3DM,CI4DN,WAFA,YAFA,UAFA,kBACA,MAEA,SAGA,CAGF,sBACE,wDAGF,qBACE,0DAIJ,cACE,8BF5EW,CE6EX,eC3EJ,QAEE,kBADA,aAIA,cAFA,gBACA,aAFA,YAGA","sources":["scss/1-base/_normalisation.scss","scss/2-components/_form.scss","scss/2-components/_heading.scss","scss/1-base/_colours.scss","scss/0-core/_breakpoints.scss","scss/1-base/_typopgraphy.scss","scss/2-components/_input.scss","scss/2-components/_item.scss","scss/2-components/_list.scss"],"sourcesContent":["/* stylelint-disable */\n/// HTML normalisation for browsers (not project specific)\n/// I've stripped out the comments, so they aren't compiled into CSS\n/// Any project specific normalisation rules should be added as scaffolding\n/// There are some additional normalisation rules, which seem to be standard in all projects\n///\n/// @author necolas\n/// @source https://github.com/necolas/normalize.css/\n*,\n*:before,\n*:after {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-box-sizing: inherit;\n  -moz-box-sizing: inherit;\n  box-sizing: inherit;\n}\n\nhtml {\n  line-height: 1.15;\n  -webkit-text-size-adjust: 100%;\n}\n\nbody {\n  margin: 0;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\npre {\n  font-family: 'monospace', monospace;\n  font-size: 1em;\n}\n\na {\n  background-color: transparent;\n}\n\na img {\n  outline: none;\n  border: none;\n}\n\nabbr[title] {\n  border-bottom: none;\n  text-decoration: underline;\n  text-decoration: underline dotted;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\ncode,\nkbd,\nsamp {\n  font-family: 'monospace', monospace;\n  font-size: 1em;\n}\n\nsmall {\n  font-size: 80%;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nimg {\n  border-style: none;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: 100%;\n  line-height: 1.15;\n  margin: 0;\n}\n\nbutton,\ninput {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button;\n}\n\nbutton::-moz-focus-inner,\n[type='button']::-moz-focus-inner,\n[type='reset']::-moz-focus-inner,\n[type='submit']::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\nbutton:-moz-focusring,\n[type='button']:-moz-focusring,\n[type='reset']:-moz-focusring,\n[type='submit']:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\nlegend {\n  box-sizing: border-box;\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  padding: 0;\n  white-space: normal;\n}\n\nprogress {\n  vertical-align: baseline;\n}\n\ntextarea {\n  overflow: auto;\n}\n\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n[type='number']::-webkit-inner-spin-button,\n[type='number']::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[type='search'] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type='search']::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\ndetails {\n  display: block;\n}\n\nsummary {\n  display: list-item;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\nfigure {\n  margin: 0;\n}\n/* stylelint-enable */\n","$this: 'c-form' !global;\n\n.#{$this} {\n  display: flex;\n  max-width: 500px;\n  padding: 0 20px;\n  margin: 0 auto;\n}\n","$this: 'c-heading' !global;\n\n.#{$this} {\n  padding: 10px;\n  text-align: center;\n  background-color: $BLACK;\n\n  @include breakpoint('>=', 'ms') {\n    padding: 40px;\n  }\n\n  &__text {\n    margin: 0;\n    font-family: $FONT_REGULAR;\n    font-size: 30px;\n    color: $WHITE;\n\n    @include breakpoint('>=', 'ms') {\n      font-size: 40px;\n    }\n  }\n}\n","$BLACK: #000000;\n$WHITE: #ffffff;\n$GREY: #696969;\n$DARK_GREY: #333333;\n","/// Map of device widths used for media queries in this project\n///\n/// @author Samuel Nicholls\n/// @since 1.0.0\n///\n/// @access private\n/// @group breakpoints\n/// @see breakpoint()\n///\n/// @type Map\n/// @prop {string} device.key - key to return value\n/// @prop {int} device.value - pixel width of device\n\n@function map-deep-get($map, $keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n\n  @return $map;\n}\n\n$breakpoint-map: (\n  'ms': 480,\n  // mobile small (portrait)\n    'ml': 600,\n  // mobile large (landscape)\n    'ts': 720,\n  // tablet small (portrait)\n    'tl': 960,\n  // tablet large (landscape)\n    'ls': 1024,\n  // laptop small\n    'll': 1200,\n  // laptop large\n    'lxl': 1366,\n  // laptop extra large\n    'ds': 1400,\n  // desktop small\n    'dm': 1500,\n  // deskptop medium\n    'dl': 1800,\n  // desktop large\n    'dxl': 1920,\n  // desktop extra large\n) !default;\n\n/// Unit of measurement for media queries\n///\n/// @author Samuel Nicholls\n/// @since 1.0.0\n///\n/// @access private\n/// @group breakpoints\n/// @see breakpoint()\n///\n/// @type String\n$breakpoint-unit: 'px';\n\n/// Mixin to standardise media queries declaration\n///\n/// @author Samuel Nicholls\n/// @since 1.0.0\n///\n/// @access public\n/// @group breakpoints\n///\n/// @param {String} $operation - Apply a combination of min and max width\n/// @param {String} $breakpoint-key - Specify viewport size to target\n/// @param {String} $media-type - Specify device type, or just do it for all\n///\n/// @example scss - Usage\n///\n/// .foo {\n///   padding: 20px;\n///\n///   @include breakpoint('>=', 'ms') {\n///     padding: 30px;\n///   }\n/// }\n///\n/// @example css - CSS output\n///\n/// .foo {\n///   padding: 20px;\n/// }\n///\n/// @media all and (min-width: 480px) {\n///   .foo {\n///     padding: 30px;\n///   }\n/// }\n@mixin breakpoint($operation, $breakpoint-key, $media-type: 'all') {\n  @if (map-has-key($breakpoint-map, $breakpoint-key)) {\n    $query: map-deep-get($breakpoint-map, $breakpoint-key);\n    $query-value: $query + $breakpoint-unit;\n\n    // Basic queries for mobile or desktop first approaches\n\n    @if $operation == '<=' {\n      @media #{$media-type} and (max-width: $query-value) {\n        @content;\n      }\n    }\n\n    @if $operation == '>=' {\n      @media #{$media-type} and (min-width: $query-value) {\n        @content;\n      }\n    }\n\n    // Operations without having to be equal.\n\n    @if $operation == '<' {\n      @media #{$media-type} and (max-width: ($query - 1) + $breakpoint-unit) {\n        @content;\n      }\n    }\n\n    @if $operation == '>' {\n      @media #{$media-type} and (min-width: ($query + 1) + $breakpoint-unit) {\n        @content;\n      }\n    }\n  }\n}\n","$FONT_REGULAR: 'Poppins', sans-serif;\n","$this: 'c-input' !global;\n\n.#{$this} {\n  width: 100%;\n  padding: 10px;\n  font-family: $FONT_REGULAR;\n  border: 1px solid $BLACK;\n}\n","$this: 'c-item' !global;\n\n.#{$this} {\n  display: flex;\n  align-items: center;\n\n  &--completed {\n    @extend .#{$this};\n    .#{$this}__circle {\n      background-color: $BLACK;\n\n      &::before {\n        display: block;\n      }\n    }\n\n    .#{$this}__text {\n      color: $GREY;\n      text-decoration: line-through;\n    }\n  }\n\n  &__circle {\n    position: relative;\n    width: 10px;\n    height: 20px;\n    margin-right: 20px;\n    background-color: $WHITE;\n    border: 1px solid $BLACK;\n    cursor: pointer;\n\n    &::before {\n      display: none;\n      position: absolute;\n      top: 2px;\n      right: 8px;\n      width: 5px;\n      height: 11px;\n      border-right: 2px solid $WHITE;\n      border-bottom: 2px solid $WHITE;\n      transform: rotate(45deg);\n      content: '';\n    }\n  }\n\n  &__cross {\n    position: relative;\n    width: 22px;\n    height: 22px;\n    padding: 0;\n    margin-left: auto;\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n\n    &::before,\n    &::after {\n      position: absolute;\n      top: 0;\n      left: 15px;\n      width: 2px;\n      height: 22px;\n      background-color: $DARK_GREY;\n      content: '';\n    }\n\n    &::before {\n      transform: rotate(45deg);\n    }\n\n    &::after {\n      transform: rotate(-45deg);\n    }\n  }\n\n  &__text {\n    font-family: $FONT_REGULAR;\n    font-size: 18px;\n  }\n}\n","$this: 'c-list' !global;\n\n.#{$this} {\n  display: grid;\n  row-gap: 10px;\n  max-width: 500px;\n  padding: 20px;\n  margin: 0 auto;\n}\n"],"names":[],"sourceRoot":""}